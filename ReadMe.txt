****************************************************************
		 Outbox-Inbox Design Pattern Example
					Elif GÃ¼ner
					28.02.2024
****************************************************************

OrderAPI              -------->     OrderOutboxTablePublisherService           -------->     StockAPI
--------                            --------------------------------                         --------------
orderOutboxes table                   OrderOutboxPublishJob                                  orderInboxes table insertion
	Payload = orderCreatedEvent         checkes OrderOutboxes table(5 secs)                  Payload = orderCreatedEvent
	ProcessedDate = null                     for ProcessedDate = null                        Processed = false
                                        orderCreatedEvent = Payload                          scan orderInboxes table for Processed = false
					OrderOutboxes.ProcessedDate=getdate()                make the necessary process on OrderCreatedEvent(Payload)
                                        publish orderCreatedEvent                            Processed = true
										
****************************************************************

1. The order which is generated via SwaggerUI is received by OrderAPI webAPI.
   Example order:
   
   {
  "buyerId": 1,
  "orderItems": [
    {
      "productId": 2,
      "count": 3,
      "price": 4
    },
	{
      "productId": 5,
      "count": 6,
      "price": 7
    }
  ]
}

2. order information is inserted to Orders and OrderItems tables.
   
   select * from Orders
   
		Id          BuyerId     OrderStatus CreatedDate                 TotalPrice
		----------- ----------- ----------- --------------------------- ---------------------------------------
		3           1           0           2024-02-27 14:42:45.1265840 54.00


	select * from OrderItems

		Id          ProductId   Count       Price                                   OrderId
		----------- ----------- ----------- --------------------------------------- -----------
		5           2           3           4.00                                    3
		6           5           6           7.00                                    3

   orderCreatedEvent is generated by OrderAPI.
   
   OrderOutboxes table is used in order to not to loose data. ProcessedDate is set to null.
   orderCreatedEvent is serialized and written to Payload field. 

		select * from OrderOutboxes   
		
		Id  OccurredOn                  ProcessedDate  Type                Payload
		--- --------------------------- -------------- ------------------- ---------------------------------------------------------------------------------------------------------------------------------
		1   2024-02-27 14:42:48.2490491 NULL           orderCreatedEvent   {"OrderId":3,"BuyerId":1,"OrderItems":[{"ProductId":2,"Count":3,"Price":4},{"ProductId":5,"Count":6,"Price":7}],"TotalPrice":54}

	orderCreatedEvent is sent to a queue which is consumed by StockAPI.
	
3. A worker service (OrderOutboxTablePublisherService)is implemented with Quartz library which scans OrderOutboxes table every five seconds with a job
   and sends the records whoose ProcessedDate is null to StockAPI.
   
4. Dapper micro ORM is used in order to make processes on OrderOutboxes table every five seconds.
   If a record is found which ProcessedDate = null and Type=OrderCreatedEvent, ProcessedDate is updated with getdate()
   and orderCreatedEvent event is received by deserializing the Payload field, than orderCreatedEvent is published to StockAPI.
   
5. StockAPI receives the event and inserts it to the OrderInboxes table by setting Processed field to false,
   and Payload field with serialized orderCreatedEvent.
   Than, OrderInboxes table is scanned for the records whose Processed flag is false.
   Payload field is deserialized as OrderCreatedEvent and necessary processings are done on this event.
   After that, Processed field is set to true.

6. Idempotent Work has been done and Id field of the OrderCreatedEvent, OrderInboxes and OrderOutboxes tables are changed 
   to Guid IdempotentToken (also set as primary key) in order to control if the same message is sent from publisher to consumer and prevent
   processing the same message.
